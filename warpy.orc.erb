// vim: set ft=csound:

/*
 * This file is part of Warpy.
 *
 * Warpy is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Warpy is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Warpy.  If not, see <https://www.gnu.org/licenses/>.
 */

massign 0,1

gistereo init 0
gisampleready init 0
gkfirstrun init 1
gSpath init ""
gisampledur init 0
gkreleaseline init 0

instr PathGetter
    gSpath chnget "path"

    knewfile changed2 gSpath
    ipathempty strcmp gSpath, ""
    if ((knewfile == 1) || ((gkfirstrun == 1) && (ipathempty != 0))) then
        event "i", "FileLoader", 0, 0
        if gkfirstrun == 1 then
            gkfirstrun = 0
        endif
    endif
endin

instr +FileLoader
    ichannels filenchnls gSpath
    gistereo = ichannels - 1
    gileftchan ftgen 1, 0, 0, 1, gSpath, 0, 0, 1
    if gistereo == 1 then
        girightchan ftgen 2, 0, 0, 1, gSpath, 0, 0, 2
    else
        girightchan = gileftchan
    endif
    gisampledur chnget "sample_dur"
    gisampleready = 1
endin

gitabsize = 2 ^ 17
gisine     ftgen 0, 0, gitabsize, 10, 1
gitriangle ftgen 0, 0, gitabsize, 7, -1, gitabsize/2, 1, gitabsize/2, -1
gisquare   ftgen 0, 0, gitabsize, 7, 1, gitabsize/2, 1, 0, -1, gitabsize/2, -1
giwacky    ftgen 0, 0, 131072,    7, 0, 10662, -0.695541, 6766, 0.624639, 7634, -0.217517, 12296, 0.894129, 5166, 0.210780, 11336, 0.318255, 3794, -0.677895, 34784, 0.791466, 5988, -0.456529, 7404, -0.179018, 2240, -0.769329, 18330, 0.340712, 4674, 0

instr 1
    if gisampleready == 1 then
        kgain chnget "gain"
        ; bpm
        kbps chnget "bps"
        ; speed
        <%= VocoderParams.new('speed', 'k').params %>
        ; pitch
        <%= VocoderParams.new('pitch', 'k').params %>
        ; envelope
        ienvatt   chnget "env_attack_time"
        ienvattsh chnget "env_attack_shape"
        ienvdec   chnget "env_decay_time"
        ienvdecsh chnget "env_decay_shape"
        ienvsus   chnget "env_sustain_level"
        ienvrel   chnget "env_release_time"
        ienvrelsh chnget "env_release_shape"
        ; reverse
        kreverse chnget "reverse"
        ; loop times
        imainlooptimes chnget "loop_times"
        ; start and end points
        kstart chnget "start_point"
        kend   chnget "end_point"
        ; sustain
        ksustainsection chnget "sustain_section"
        ksustainstart   chnget "sustain_start_point"
        ktiesendtomend  chnget "tie_sustain_end_to_main_end"
        if ktiesendtomend == 1 then
            ksustainend = kend
        else
            ksustainend   chnget "sustain_end_point"
        endif
        isusmainlooplimit = imainlooptimes + 1
        ; release
        kreleasesection   chnget "release_section"
        ktierstarttomend  chnget "tie_release_start_to_main_end"
        if ktierstarttomend == 1 then
            kreleasestart = kend
        else
            kreleasestart chnget "release_start_point"
        endif
        kreleaseend       chnget "release_end_point"
        ireleaselooptimes chnget "release_loop_times"
        ; vibrato
        kvibamp      chnget "vibrato_amp"
        if kvibamp > 0 then
            kvibtempotog chnget "vibrato_tempo_toggle"
            if kvibtempotog == 1 then
                kvibfreq = chnget:k("vibrato_tempo_fraction") * kbps
            else
                kvibfreq chnget "vibrato_freq"
            endif
            kvibwave chnget "vibrato_waveform_type"
            if kvibwave == 2 then
                kvibtable = gitriangle
            elseif kvibwave == 3 then
                kvibtable = gisquare
            elseif kvibwave == 4 then
                kvibtable = giwacky
            else
                kvibtable = gisine
            endif
            kvib = tablekt:k(phasor:k(kvibfreq), kvibtable, 1) * kvibamp
        else
            kvib = 0
        endif
        ; chorus
        kchorusvoices chnget "chorus_voices"
        if kchorusvoices > 0 then
            kchorusmixcenter chnget "chorus_mix_center"
            kchorusmixsides  chnget "chorus_mix_sides"
            if kchorusvoices == 1 then
                <%= chorus_params(amount_on: 1) %>
            elseif kchorusvoices == 2 then
                <%= chorus_params(amount_on: 2) %>
            elseif kchorusvoices == 3 then
                <%= chorus_params(amount_on: 3) %>
            endif
        else
            kchorusmixcenter = 1
            kchorusmixsides  = 0
        endif

        iamp  ampmidi 1
        imfreq cpsmidi

        kmainloops init 0
        kreleased init 0
        kreleaseloops init 0

        if <%= phase_over('main') %> && \
           !<%= sustain_on %> && \
           <%= release_on %> then
            kreleased = 1
        else
            kreleased release
        endif

        <%= VocoderParams.new('speed', 'k').vocparam %>
        <%= VocoderParams.new('pitch', 'k').vocparam %>

        aenv transegr 0,       ienvatt, ienvattsh, \
                      1,       ienvdec, ienvdecsh, \
                      ienvsus, ienvrel, ienvrelsh, \
                      0

        if kreleased == 1 then
            if <%= release_on %> then
                kmainloops = kmainloops
                kreleaseloops += <%= kline('kreleasestart', 'kreleaseend') %>
            else
                kstop = 1
            endif
        elseif <%= in_sustain_phase %> then
            kmainloops = kmainloops
        else
            kmainloops += <%= kline('kstart', 'kend') %>
        endif

        krate = (kspeedfinal / gisampledur)
        if kreleased == 1 then
            <%= scaled_pointer(phase: 'release', vartype: 'k') %>
        elseif <%= in_sustain_phase %> then
            <%= scaled_pointer(phase: 'sustain', vartype: 'k') %>
        elseif (kstart > 0 || kend < 1) then
            <%= scaled_pointer(vartype: 'k') %>
        else
            apointer phasor krate
        endif

        if kreverse == 1 then
            asamplepos = abs(apointer - 0.9)*gisampledur
        else
            asamplepos = apointer*gisampledur
        endif

        if kchorusvoices == 0 then
            asigl chorusig <%= mincer_out_func('gileftchan') %>,
                           kchorusvoices,
                           0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0,
                           1, 0, aenv

            if gistereo == 1 then
                asigr chorusig <%= mincer_out_func('girightchan') %>,
                               kchorusvoices,
                               0, 0, 0, 0, 0, 0,
                               0, 0, 0, 0, 0, 0,
                               1, 0, aenv
            else
                asigr = asigl
            endif
        elseif kchorusvoices == 1 then
            asigl chorusig <%= mincer_out_func('gileftchan') %>,
                           kchorusvoices,
                           <%= mincer_out_func('gileftchan', 'kchorusdetuneabove1') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetunebelow1') %>,
                           0, 0, 0, 0,
                           kchorusspreadabove1l, kchorusspreadbelow1l,
                           0, 0, 0, 0,
                           kchorusmixcenter, kchorusmixsides, aenv
            asigr chorusig <%= mincer_out_func('girightchan') %>,
                           kchorusvoices,
                           <%= mincer_out_func('girightchan', 'kchorusdetuneabove1') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetunebelow1') %>,
                           0, 0, 0, 0,
                           kchorusspreadabove1r, kchorusspreadbelow1r,
                           0, 0, 0, 0,
                           kchorusmixcenter, kchorusmixsides, aenv
        elseif kchorusvoices == 2 then
            asigl chorusig <%= mincer_out_func('gileftchan') %>,
                           kchorusvoices,
                           <%= mincer_out_func('gileftchan', 'kchorusdetuneabove1') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetunebelow1') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetuneabove2') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetunebelow2') %>,
                           0, 0,
                           kchorusspreadabove1l, kchorusspreadbelow1l,
                           kchorusspreadabove2l, kchorusspreadbelow2l,
                           0, 0,
                           kchorusmixcenter, kchorusmixsides, aenv
            asigr chorusig <%= mincer_out_func('girightchan') %>,
                           kchorusvoices,
                           <%= mincer_out_func('girightchan', 'kchorusdetuneabove1') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetunebelow1') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetuneabove2') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetunebelow2') %>,
                           0, 0,
                           kchorusspreadabove1r, kchorusspreadbelow1r,
                           kchorusspreadabove2r, kchorusspreadbelow2r,
                           0, 0,
                           kchorusmixcenter, kchorusmixsides, aenv
        else
            asigl chorusig <%= mincer_out_func('gileftchan') %>,
                           kchorusvoices,
                           <%= mincer_out_func('gileftchan', 'kchorusdetuneabove1') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetunebelow1') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetuneabove2') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetunebelow2') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetuneabove3') %>,
                           <%= mincer_out_func('gileftchan', 'kchorusdetunebelow3') %>,
                           kchorusspreadabove1l, kchorusspreadbelow1l,
                           kchorusspreadabove2l, kchorusspreadbelow2l,
                           kchorusspreadabove3l, kchorusspreadbelow3l,
                           kchorusmixcenter, kchorusmixsides, aenv
            asigr chorusig <%= mincer_out_func('girightchan') %>,
                           kchorusvoices,
                           <%= mincer_out_func('girightchan', 'kchorusdetuneabove1') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetunebelow1') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetuneabove2') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetunebelow2') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetuneabove3') %>,
                           <%= mincer_out_func('girightchan', 'kchorusdetunebelow3') %>,
                           kchorusspreadabove1r, kchorusspreadbelow1r,
                           kchorusspreadabove2r, kchorusspreadbelow2r,
                           kchorusspreadabove3r, kchorusspreadbelow3r,
                           kchorusmixcenter, kchorusmixsides, aenv
        endif

        kdialdown init 1
        kstop init 0

        if (<%= phase_over('main', early: 0.1) %> && \
            !<%= release_on %> && !<%= sustain_on %>) || \
           <%= phase_over('release', early: 0.1) %> then
            kstop = 1
        endif

        if kstop == 1 then
            kdialdown = kdialdown - 0.3
            if kdialdown < 0 then
                kdialdown = 0
            endif
            asigl = asigl * kdialdown
            asigr = asigr * kdialdown
        endif

        outs asigl, asigr
    endif
endin
